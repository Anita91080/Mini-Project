Below is the code for Image Enhancement using Deep Learning


# Complete Code: Image Enhancement with Paths Highlighted 
 
# Segment 1: Import Necessary Libraries 
# Import libraries for data handling, preprocessing, and visualization 
import numpy as np 
import os 
import cv2 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Conv2D 
from tensorflow.keras.optimizers import Adam 
from sklearn.model_selection import train_test_split 
import matplotlib.pyplot as plt 
 
# Segment 2: Define Image Enhancement Functions 
 
# Noise Reduction 
def reduce_noise(img): 
    """ 
    Apply noise reduction using Non-Local Means Denoising. 
    """ 
    return cv2.fastNlMeansDenoisingColored(img, None, 10, 10, 7, 21) 
 
# Contrast Enhancement 
def enhance_contrast(img): 
    """ 
    Enhance image contrast using Histogram Equalization. 
    """ 
    img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV) 
    img_yuv[:, :, 0] = cv2.equalizeHist(img_yuv[:, :, 0]) 
    return cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR) 
 
# Sharpness Enhancement 
def enhance_sharpness(img): 
    """ 
    Enhance image sharpness using Unsharp Masking. 
    """ 
    blur = cv2.GaussianBlur(img, (0, 0), 3) 
     
return cv2.addWeighted(img, 1.5, blur, -0.5, 0) 
 
# Brightness Adjustment 
def adjust_brightness(img, gamma=1.2): 
    """ 
    Adjust image brightness using Gamma Correction. 
    """ 
    inv_gamma = 1.0 / gamma 
    table = np.array([((i / 255.0) ** inv_gamma) * 255 for i in range(256)]).astype("uint8") 
    return cv2.LUT(img, table) 
 
# Edge Enhancement 
def enhance_edges(img): 
    """ 
    Enhance edges using Canny Edge Detection combined with the original image. 
    """ 
    edges = cv2.Canny(img, 100, 200) 
    return cv2.addWeighted(img, 0.8, cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR), 0.2, 0) 
 
# Preprocessing Pipeline 
def preprocess_image(img): 
    """ 
    Apply multiple enhancement techniques to preprocess an image. 
    """ 
    img = reduce_noise(img) 
    img = enhance_contrast(img) 
    img = adjust_brightness(img, gamma=1.2) 
    img = enhance_sharpness(img) 
    img = enhance_edges(img) 
    return img 
 
# Segment 3: Load and Preprocess the Dataset 
def load_images(folder, target_size=(128, 128)): 
    """ 
    Load images from a folder and resize them to the target size. 
    """ 
    images = [] 
    for filename in os.listdir(folder): 
        img = cv2.imread(os.path.join(folder, filename)) 
        if img is not None: 
            img = cv2.resize(img, target_size) 
            img = preprocess_image(img)  # Apply preprocessing pipeline 
            images.append(img) 
    return np.array(images) 
 
# Load dataset and normalize images 
input_folder = "dataset_path_here"  # *[REPLACE with your dataset path]* 
 
images = load_images(input_folder) 
images = images / 255.0  # Normalize to [0, 1] 
          
            # Create low-resolution images 
 
low_res_images = np.array([cv2.resize(img, (64, 64)) for img in images]) 
low_res_images = np.array([cv2.resize(img, (128, 128)) for img in low_res_images]) 
 
# Split into training and validation sets 
x_train, x_val, y_train, y_val = train_test_split(low_res_images, images, test_size=0.2, 
random_state=42) 
 
# Segment 4: Build the Super-Resolution Model 
def build_model(): 
    """ 
    Define a CNN for image super-resolution. 
    """ 
    model = Sequential() 
    model.add(Conv2D(128, (9, 9), activation='relu', padding='same', input_shape=(128, 128, 
3))) 
    model.add(Conv2D(64, (5, 5), activation='relu', padding='same')) 
    model.add(Conv2D(64, (5, 5), activation='linear', padding='same')) 
    model.add(Conv2D(32, (3, 3), activation='linear', padding='same')) 
     
    model.add(Conv2D(3, (3, 3), activation='linear', padding='same'))  # 3 channels for RGB 
    model.compile(optimizer=Adam(learning_rate=0.0001), loss='mean_squared_error') 
    return model 
 
# Build and summarize the model 
model = build_model() 
model.summary() 
 
# Segment 5: Train the Model 
# Train the model 
history = model.fit( 
    x_train, y_train, 
    validation_data=(x_val, y_val), 
    epochs=50, 
    batch_size=16, 
    verbose=1 
) 
 
# Save the model 
model.save("image_enhancement_model.keras")  # *[MODEL will be saved here, update 
path if required]* 
            # Segment 6: Evaluate the Model 
# Plot training and validation loss 
plt.plot(history.history['loss'], label='Training Loss') 
plt.plot(history.history['val_loss'], label='Validation Loss') 
 
plt.xlabel('Epochs') 
plt.ylabel('Loss') 
plt.legend() 
 
plt.title("Training vs Validation Loss") 
plt.show() 
 
# Test a sample image 
sample_lr = x_val[0] 
sample_hr = y_val[0] 
enhanced_image = model.predict(np.expand_dims(sample_lr, axis=0))[0] 
 
# Display results 
plt.figure(figsize=(15, 5)) 
plt.subplot(1, 3, 1) 
plt.title("Low-Resolution") 
plt.imshow(sample_lr) 
plt.axis('off') 
 
plt.subplot(1, 3, 2) 
plt.title("Original High-Resolution") 
plt.imshow(sample_hr) 
plt.axis('off') 
 
plt.subplot(1, 3, 3) 
plt.title("Enhanced Image") 
plt.imshow(np.clip(enhanced_image, 0, 1)) 
plt.axis('off') 
plt.show() 
 
# Segment 7: Test with New Images 
def enhance_image(img_path, model): 
    """ 
    Preprocess and enhance a new image using the trained model. 
    """ 
    img = cv2.imread(img_path) 
    lr_img = cv2.resize(img, (128, 128)) / 255.0 
    enhanced_img = model.predict(np.expand_dims(lr_img, axis=0))[0] 
    return np.clip(enhanced_img, 0, 1) 
 
# Test on a new image 
test_img_path = "path_to_test_image.jpg"  # *[REPLACE with the path to your test image]* 
result = enhance_image(test_img_path, model) 
 
# Display result 
plt.imshow(result) 
plt.title("Enhanced Image") 
plt.axis('off') 
plt.show() 
 
For Creating an interface: 
 
import streamlit as st 
import numpy as np 
import cv2 
import time 
from PIL import Image 
 
# Dummy function for image enhancement (replace with your model's function) 
def enhance_image(input_image): 
    # Simulate processing time 
    time.sleep(2) 
     
    # Example enhancement: Convert to grayscale (replace this with your model's 
processing) 
    enhanced_image = cv2.cvtColor(np.array(input_image), cv2.COLOR_RGB2GRAY) 
    enhanced_image = cv2.cvtColor(enhanced_image, cv2.COLOR_GRAY2RGB) 
    return enhanced_image 
 
# Streamlit App 
def main(): 
    st.title("Image Enhancement Interface") 
    st.write("Upload an image and see the enhanced result generated by the model.") 
 
    # Upload image 
    uploaded_file = st.file_uploader("Choose an image", type=["jpg", "png", "jpeg"]) 
     
    if uploaded_file is not None: 
        # Display the input image 
        st.subheader("Input Image") 
        input_image = Image.open(uploaded_file) 
        st.image(input_image, caption="Uploaded Image", use_column_width=True) 
 
        # Process the image 
        if st.button("Enhance Image"): 
            st.subheader("Processing...") 
            start_time = time.time() 
            enhanced_image = enhance_image(input_image) 
            end_time = time.time() 
 
            # Display output and details 
            st.subheader("Enhanced Image") 
            st.image(enhanced_image, caption="Enhanced Output", use_column_width=True) 
            st.write(f"Processing Time: {end_time - start_time:.2f} seconds") 
            st.write("### Additional Info:") 
            st.write("- Input Dimensions: ", np.array(input_image).shape) 
            
        st.write("- Output Dimensions: ", np.array(enhanced_image).shape) 
 
       if _name_ == "_main_": 
           main()





